{
    "$id": "http://nova.app/extension.json",
    "$schema": "http://json-schema.org/draft-07/schema",

    "title": "Nova Extension Manifest",
    "description": "This file defines the fundamental metadata and components of a Nova extension and how it integrates with the IDE.",

    "type": "object",
    "required": [
        "bugs",
        "categories",
        "description",
        "identifier",
        "name",
        "organization",
        "version"
    ],

    "properties": {
        "activationEvents": {
            "description": "Set of Activation Events",
            "type": "array",
            "uniqueItems": true,
            "items": {
                "type": "string",
                "examples": [
                    "onCommand:<COMMAND_ID>",
                    "onLanguage:<SYNTAX_ID>",
                    "onWorkspaceContains:<GLOB>",
                    "*"
                ],
                "oneOf": [
                    {
                        "pattern": "^onCommand:.+$",
                        "description": "When an extension command with the specified name is invoked"
                    },
                    {
                        "pattern": "^onLanguage:.+$",
                        "description": "When a document of the specified language is opened"
                    },
                    {
                        "pattern": "^onWorkspaceContains:.+$",
                        "description": "When a project is opened that contains a file matching the specified glob pattern"
                    },
                    {
                        "pattern": "^[*]$",
                        "description": "A special string that may be used to indicate the extension should always start"
                    }
                ]
            }
        },
        "breakpoints": {
            "description": "For extensions that provide a Debug Adapter supporting breakpoints; a description of the contexts in which breakpoints are supported, as an array of key-value objects.",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "syntax": {
                        "description": "The name of the language syntax. Source breakpoints will be enabled within lines of code using this syntax (or when included as a subsyntax of another language).",
                        "type": "string"
                    }
                }
            }
        },
        "bugs": {
            "description": "A string or object describing the URL to the extension’s issue tracker",
            "$ref": "#/definitions/url"
        },
        "categories": {
            "title": "Category Identifiers",
            "description": "Extensions submitted to the Extension Library can be put into several categories so users can easily find them. Defining at least one category is required to be published on the extension library.",
            "type": "array",
            "uniqueItems": true,
            "items": {
                "type": "string",
                "oneOf": [
                    {
                        "const": "clips",
                        "description": "Extensions which contribute clips specified in Nova’s clip JSON format"
                    },
                    {
                        "const": "commands",
                        "description": "Extensions which contribute one or more Commands"
                    },
                    {
                        "const": "completions",
                        "description": "Extensions which contribute a Completions Provider, completions from a LanguageClient, or completions from other means"
                    },
                    {
                        "const": "formatters",
                        "description": "Extensions which format or \"prettify\" text and code"
                    },
                    {
                        "const": "issues",
                        "description": "Extensions which contribute an Issue Provider"
                    },
                    {
                        "const": "key-bindings",
                        "description": "Extensions which contribute key bindings in Nova’s key binding JSON format"
                    },
                    {
                        "const": "languages",
                        "description": "Extensions which contribute languages syntaxes and additional editor intelligence, such as through a LanguageClient"
                    },
                    {
                        "const": "sidebars",
                        "description": "Extensions which contribute a sidebar using the TreeView API"
                    },
                    {
                        "const": "tasks",
                        "description": "Extensions which contribute Task Templates"
                    },
                    {
                        "const": "themes",
                        "description": "Extensions which contribute Themes"
                    }
                ]
            }
        },
        "commands": {
            "title": "Extension Commands",
            "description": "User-invokable commands can be added to the menus and command palette, optionally with keyboard key-equivalents. These commands invoke a callback registered in the JavaScript execution environment of the extension.",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "editor": {
                    "description": "Commands that appear within the Editor menu for text documents",
                    "$ref": "#/definitions/commandList"
                },
                "extensions": {
                    "description": "Commands that appear within the Extensions menu for the workspace",
                    "$ref": "#/definitions/commandList"
                },
                "command-palette": {
                    "description": "Commands that should only appear within the Command Palette",
                    "$ref": "#/definitions/commandList"
                },
                "text": {
                    "description": "Commands that should be available within an editor for direct handling of text input, such as emulation of alternative key binding schemes",
                    "$ref": "#/definitions/commandList"
                }
            }
        },
        "config": {
            "title": "Global Extension Settings",
            "description": "Set of global Preferences, as an array of objects defining defining individual configuration items available to the user.\nAlternatively, the value of this property may be a string representing a relative path pointing to a separate JSON file defining the configuration items in the same format.",
            "type": [ "array", "string" ],
            "items": {
                "title": "Global Configuration Item",
                "$ref": "#/definitions/configItem"
            }
        },
        "configWorkspace": {
            "title": "Workspace Extension Settings",
            "description": "Set of workspace (project-specific) Preferences, as an array of objects defining individual configuration items available to the user.\nAlternatively, the value of this property may be a string representing a relative path pointing to a separate JSON file defining the configuration items in the same format.",
            "type": [ "array", "string" ],
            "items": {
                "title": "Workspace Configuration Item",
                "$ref": "#/definitions/configItem"
            }
        },
        "description": {
            "description": "The user-readable descriptive text",
            "type": "string"
        },
        "debugAdapters": {
            "description": "For extensions that provide a Debug Adapter; a description of your adapter defining the user-readable name of the debug adapter. This description is used when showing UI elements related to the adapter when running a debug session or managing breakpoints.\nThe \"debugAdapters\" object is keyed by the identifier of your adapter with nested object properties describing it. The identifier key should be the same as is provided when creating a \"TaskDebugAdapterAction\".",
            "patternProperties": {
                "^.*$": {
                    "title": "Debug Adapter",
                    "type": "object",
                    "properties": {
                        "name": {
                            "description": "The user-readable name for the adapter. This is shown for UI elements specific to the adapter, such as above the Exception Filter Breakpoints for the adapter.",
                            "type": "string"
                        },
                        "image": {
                            "description": "The name of an image contributed by your extension. This is shown for UI elements specific to the adapter, such as above the Exception Filter Breakpoints for the adapter. Images for this value should be 16px (@1x, and 32px@2x)",
                            "type": "string"
                        }
                    }
                }
            }
        },
        "entitlements": {
            "description": "Description of an extension’s Entitlements. It is recommended to declare the most strict set of entitlements that are required for your extension.",
            "type": "object",
            "properties": {
                "clipboard": {
                    "description": "Provides access to the Clipboard API.",
                    "type": "boolean"
                },
                "filesystem": {
                    "description": "Provides access to the FileSystem and related APIs to read and/or write to files on disk (Note: this entitlement is not required to access the open documents within the IDE)",
                    "type": "string",
                    "enum": [ "readonly", "readwrite" ]
                },
                "requests": {
                    "description": "Provides access to the Fetch API to perform asynchronous HTTP network requests",
                    "type": "boolean"
                },
                "process": {
                    "description": "Provides access to the Process API to launch and communciate with external tools",
                    "type": "boolean"
                }
            }
        },
        "funding": {
            "description": "A string representing the URL to the extension’s funding page, if any.\nExtensions may provide this value to show a \"Sponsor\" button on the extension details page. This link may point to services such as Patreon or GitHub Sponsor to allow users to donate / sponsor development.",
            "$ref": "#/definitions/url"
        },
        "homepage": {
            "description": "A string representing the URL to the extension’s website homepage",
            "type": "string",
            "format": "uri"
        },
        "identifier": {
            "description": "The unique extension identifier",
            "type": "string"
        },
        "issueMatchers": {
            "description": "Set of matcher definitions provided to the \"IssueParser\" API. Each issue matcher object is keyed with an identifier, as is used with the \"IssueParser\" constructor API. This value must be unique within a single extension.",
            "type": "object",
            "patternProperties": {
                "^.*$": {
                    "title": "Issue Matcher",
                    "type": "object",
                    "properties": {
                        "pattern": {
                            "description": "Defines one or more objects that are used as pattern matchers (regular expressions). If one object is provided, it is the sole pattern used. If an array object is provided, each pattern will be matched successively (if the first fails, the matcher will stop). This allows matching more complex, multi-line output.",
                            "oneOf": [
                                {
                                    "$ref": "#/definitions/issueMatcherPattern"
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/issueMatcherPattern"
                                    }
                                }
                            ]
                        },
                        "linesStartAt1": {
                            "description": "Whether line numbers captured by the matcher are 1-indexed (true by default). If false, then line numbers will be assumed to be zero-indexed and are automatically incremented for display.",
                            "type": "boolean",
                            "default": true
                        },
                        "columnsStartAt1": {
                            "description": "whether column numbers captured by the matcher are 1-indexed (true by default). If false, then line numbers will be assumed to be zero-indexed and are automatically incremented for display.",
                            "type": "boolean",
                            "default": true
                        }
                    }
                }
            }
        },
        "license": {
            "description": "The name of the extension’s license, if any.",
            "type": "string"
        },
        "max_runtime": {
            "description": "The maximum runtime supported",
            "type": "string",
            "pattern": "\\d+\\.\\d+"
        },
        "min_runtime": {
            "description": "The minimum runtime supported",
            "type": "string",
            "pattern": "\\d+\\.\\d+"
        },
        "name": {
            "description": "The user-readable extension name",
            "type": "string"
        },
        "organization": {
            "description": "The user-readable organization name",
            "type": "string"
        },
        "repository": {
            "description": "A string representing the URL to the extension’s code repository, if any.",
            "type": "string",
            "format": "uri"
        },
        "version": {
            "description": "The extension version",
            "type": "string"
        },
        "main": {
            "description": "Path to the main entrypoint script, relative to the extension's \"Scripts\" folder.",
            "type": "string"
        },
        "sidebars": {
            "description": "Set of Sidebars provided to the TreeView API",
            "type": "array",
            "items": {
                "title": "Sidebar",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The unique identifier of the sidebar. This must be unique within the scope of the extension (two sidebars may have the same identifier if they are in different extensions).",
                        "type": "string"
                    },
                    "name": {
                        "description": "The user readable name of the sidebar. This value is automatically localized when shown.",
                        "type": "string"
                    },
                    "smallImage": {
                        "description": "The name of an image to use when the sidebar dock is in Small mode. These icons should use a 16px base size (32px for 2x resources)",
                        "type": "string"
                    },
                    "smallSelectedImage": {
                        "description": "The name of an image to use when the sidebar dock is in Small mode and the sidebar is selected. If not specified, the smallImage value will be used. These icons should use a 16px base size (32px for 2x resources)",
                        "type": "string"
                    },
                    "largeImage": {
                        "description": "The name of an image to use when the sidebar dock is in Large mode. These icons should use a 24px base size (48px for 2x resources)",
                        "type": "string"
                    },
                    "largeSelectedImage": {
                        "description": "The name of an image to use when the sidebar dock is in Large mode. If not specified, the largeImage value will be used. These icons should use a 24px base size (48px for 2x resources)",
                        "type": "string"
                    },
                    "sections": {
                        "description": "An array of section definitions defining the content of the sidebar",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "The unique identifier of the section. This must be unique within the sidebar, but does not need to be unique otherwise.",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "The user readable name of the section, shown in its header. If not specified, the section header may be omitted if no headerCommands are also specified. This value is automatically localized when shown.",
                                    "type": "string"
                                },
                                "allowMultiple": {
                                    "description": "Whether the tree shown within the section allows multiple selection.",
                                    "type": "boolean"
                                },
                                "placeholderImage": {
                                    "description": "The name of an image to display if the section has no content. These icons should use a 24px base size (48px for 2x resources).",
                                    "type": "string"
                                },
                                "placeholderText": {
                                    "description": "A label to display if the section has no content. This value is automatically localized when shown.",
                                    "type": "string"
                                },
                                "headerCommands": {
                                    "description": "An array of Command definitions that will be shown as buttons in the header of the section. These buttons may be enabled and disabled using the when clause of the command.",
                                    "type": "array",
                                    "items": {
                                        "allOf": [
                                            { "$ref": "#/definitions/command" },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "image": {
                                                        "description": "Path to an image to display as a button to invoke this command",
                                                        "type": "string"
                                                    },
                                                    "tooltip": {
                                                        "description": "Tooltip to be displayed when hovering over button",
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                "contextualCommands": {
                                    "description": "An array of Command definitions that will be shown in the contextual menu of the sidebar. These buttons may be enabled and disabled using the when clause of the command.",
                                    "$ref": "#/definitions/commandList"
                                }
                            }
                        },
                        "minItems": 1,
                        "required": [ "id" ]
                    }
                },
                "required": [ "id", "name", "sections" ]
            }
        },
        "taskTemplates": {
            "description": "Set of Task Templates",
            "type": "object",
            "patternProperties": {
                "^.*$": {
                    "title": "Task Template",
                    "type": "object",
                    "properties": {
                        "name": {
                            "description": "The user-readable name of the task",
                            "type": "string"
                        },
                        "description": {
                            "description": "The user-readable descriptive text of the task",
                            "type": "string"
                        },
                        "deprecated": {
                            "description": "If a task template should be replaced with another, or removed entirely, an extension may optionally declare it as deprecated for any amount of time needed to inform the user that the template will be replaced or removed.\nThe value of this property may either be \"true\", which will show a standard deprecation notice to the user, or a string, which will be shown as the deprecation notice to the user.\nThe deprecation notice will be shown in the task template’s edit pane of the project settings.",
                            "examples": [ "Custom deprecation notice" ],
                            "oneOf": [
                                { "const": true },
                                { "type": "string" }
                            ]
                        },
                        "tasks": {
                            "description": "The most important details of a template are defined in its tasks section. This object maps each action, by name, to an object that defines how and what process should be invoked.\nAvailable action names are: \"build\", \"run\", \"clean\".",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "build": {
                                    "description": "Definition of the task's \"Build\" action.",
                                    "$ref": "#/definitions/taskAction"
                                },
                                "run": {
                                    "description": "Definition of the task's \"Run\" action.",
                                    "$ref": "#/definitions/taskAction"
                                },
                                "clean": {
                                    "description": "Definition of the task's \"Clean\" action.",
                                    "$ref": "#/definitions/taskAction"
                                }
                            }
                        },
                        "config": {
                            "description": "Each template may define a config section, which uses the same format as Preference items (i.e. the top-level \"config\" and \"configWorkspace\" properties).\nThe configuration items defined here may be referenced in the string substitution of arguments and environment passed to the template’s executable using the format \"$(Config:my.config-key)\". The value will be checked against those set in the configuration, as well as the user’s project and global preferences.",
                            "$ref": "#/definitions/configItemList"
                        }
                    }
                }
            }
        }
    },

    "definitions": {
        "commandList": {
            "type": "array",
            "items": {
                "oneOf": [
                    { "$ref": "#/definitions/separator" },
                    { "$ref": "#/definitions/command" }
                ]
            }
        },
        "command": {
            "title": "Command",
            "type": "object",
            "required": [ "title", "command" ],
            "properties": {
                "title": {
                    "description": "The visible name of the command within menus",
                    "type": "string"
                },
                "paletteTitle": {
                    "description": "The visible name of the command within the command palette. If not specified, the title will be used.",
                    "type": "string"
                },
                "command": {
                    "description": "The name of the handler registered with the nova.commands registry.",
                    "type": "string"
                },
                "shortcut": {
                    "description": "The key binding to set for the command, if not conflicting. Any standard keycode is allowed, provided at least one non-shift \"modifier\" key is provided. Modifiers are specified as cmd, opt, ctrl, and shift.",
                    "type": "string"
                },
                "when": {
                    "description": "An expression defining under what circumstances the command is available.",
                    "type": "string"
                },
                "filters": {
                    "description": "A object defining more complex filters by which to determine if a command is available. These are often simpler than a complex \"when\" expression.",
                    "type": "object",
                    "properties": {
                        "syntaxes": {
                            "description": "An array of syntax names for which the command is valid",
                            "type": "array",
                            "items": { "type": "string" }
                        },
                        "types": {
                            "description": "An array of file types for which the command is valid (file extensions or Uniform Type Identifiers)",
                            "type": "array",
                            "items": { "type": "string" }
                        }
                    }
                }
            }
        },
        "configItemList": {
            "$id": "#config",
            "type": "array",
            "items": {
                "$ref": "#/definitions/configItem"
            }
        },
        "configItem": {
            "type": "object",
            "required": [ "key", "type" ],
            "dependencies": {
                "children": { "properties": { "type": { "const": "section" } } },

                "max": { "properties": { "type": { "const": "number" } } },
                "min": { "properties": { "type": { "const": "number" } } },

                "allowsCustom": { "properties": { "type": { "const": "enum" } } },
                "radio":        { "properties": { "type": { "const": "enum" } } },
                "resolve":      { "properties": { "type": { "const": "enum" } } },
                "values":       { "properties": { "type": { "const": "enum" } } },

                "command": { "properties": { "type": { "const": "command" } } },

                "regex": { "properties": { "type": { "enum": ["string", "stringArray"] } } },

                "allowFiles":   { "properties": { "type": { "enum": ["path", "pathArray"] } } },
                "allowFolders": { "properties": { "type": { "enum": ["path", "pathArray"] } } },
                "relative":     { "properties": { "type": { "enum": ["path", "pathArray"] } } },
                "filetype":     { "properties": { "type": { "enum": ["path", "pathArray"] } } }
            },
            "properties": {
                "key": {
                    "description": "The configuration key by which the value is stored and referenced",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the item, affecting which user interface controls are used",
                    "type": "string",
                    "enum": [
                        "boolean",
                        "string",
                        "path",
                        "number",
                        "enum",
                        "text",
                        "section",
                        "command",
                        "stringArray",
                        "pathArray"
                    ]
                },
                "required": {
                    "description": "Whether the item requires a value to validate (default is false)",
                    "type": "boolean",
                    "default": false
                },
                "title": {
                    "description": "The user-readable title of the item (automatically localized)",
                    "type": "string"
                },
                "description": {
                    "description": "The user-readable descriptive text of the item (automatically localized)",
                    "type": "string"
                },
                "link": {
                    "description": "A URL string that will be opened when clicking the item’s help (?) button",
                    "type": "string",
                    "format": "uri"
                },
                "placeholder": {
                    "description": "Placeholder text displayed within the item’s text field if no value is set",
                    "type": "string"
                },
                "default": {
                    "description": "The default value of the item"
                },
                "children": {
                    "description": "Child items displayed beneath and indented from the item (section types only)",
                    "$ref": "#/definitions/configItemList"
                },
                "max": {
                    "description": "The maximum value of the item (number types only)",
                    "type": "number"
                },
                "min": {
                    "description": "The minimum value of the item (number types only)",
                    "type": "number"
                },
                "allowsCustom": {
                    "description": "Whether the item supports custom text values to be entered (enum types only)",
                    "type": "boolean"
                },
                "radio": {
                    "description": "Whether the item should prefer being displayed using radio buttons when possible (enum types only)",
                    "type": "boolean"
                },
                "command": {
                    "description": "A command name registered with the CommandsRegistry to be invoked when clicking the item’s button (command types only)",
                    "type": "string"
                },
                "regex": {
                    "description": "A regular expression pattern that will be used for validating the item (string types only)",
                    "type": "string"
                },
                "values": {
                    "description": "An array of pre-populated values to display for an item (enum types only).\nThe \"values\" property should consist of either:\n• An array of strings, which act as both the raw value (stored in the configuration) and user-displayed title of the item in the pop-up list.\n• An array of two-item arrays (tuples), where the first value is the raw string value (stored in the configuration) and the second value is the user-displayed title for that item in the pop-up list.",
                    "type": "array",
                    "items": {
                        "title": "Enum value and display name",
                        "type": [ "string", "array" ],
                        "items": [
                            { "description": "Enum value" },
                            { "description": "Enum display name", "type": "string" }
                        ]
                    }
                },
                "resolve": {
                    "description": "A command name registered with the CommandsRegistry that will be invoked to resolve the array of pre-populated values when the item is shown (enum types only).\nThis can be used to present options to the user that are not known until runtime. Enum items may specify this property in place of the \"values\" property.",
                    "type": "string"
                },
                "allowFiles": {
                    "description": "Whether the item allows choosing files from open panels (path and pathArray types only, default is true)",
                    "type": "boolean",
                    "default": true
                },
                "allowFolders": {
                    "description": "Whether the item allows choosing folders from open panels (path and pathArray types only, default is false)",
                    "type": "boolean",
                    "default": false
                },
                "relative": {
                    "description": "Whether the item prefers relative paths when choosing paths from open panels (path and pathArray types only, default is false)",
                    "type": "boolean",
                    "default": false
                },
                "filetype": {
                    "description": "An array of strings that denotes the type of files (by extension or Uniform Type Identifier) that are valid for choosing in open panels (path and pathArray types only)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "issueMatcherPattern": {
            "type": "object",
            "required": [ "regexp", "message", "line", "severity" ],
            "properties": {
                "regexp": {
                    "description": "A regular expression string defining captures for parsing",
                    "type": "string"
                },
                "message": {
                    "description": "A capture number for the user-readable message that should be displayed to the user",
                    "type": "number"
                },
                "line": {
                    "description": "A capture number for the line number where the issue begins",
                    "type": "number"
                },
                "column": {
                    "description": "A capture number for the column number where the issue begins (optional)",
                    "type": "number"
                },
                "endLine": {
                    "description": "A capture number for the line number where the issue begins (optional)",
                    "type": "number"
                },
                "endColumn": {
                    "description": "A capture number for the column number where the issue begins (optional)",
                    "type": "number"
                },
                "code": {
                    "description": "A capture number for the issue code, which may be a string or integer and is implementation dependent (such as T_PHP_PARSE_ERROR) (optional)",
                    "anyOf": [
                        { "type": "number" },
                        { "type": "string" }
                    ]
                },
                "severity": {
                    "description": "The severity of the issue.\nIf provided with an capture number, the parser will search for case-insensitive combinations of the following strings: \"warn\", \"warning\", \"err\", \"error\"\nIf provided with a string (\"warning\" or \"error\"), that severity will always be used for this matcher\nIf not provided, \"warning\" will be assumed",
                    "anyOf": [
                        { "type": "number" },
                        { "type": "string" }
                    ]
                },
                "loop": {
                    "description": "Whether the pattern should be \"looped\", matching successive lines of output until the pattern no longer matches. This allows patterns to match output for a single issue that spans multiple lines.",
                    "type": "boolean"
                }
            }
        },
        "taskAction": {
            "type": "object",
            "properties": {
                "command": {
                    "description": "The executable command to invoke.\nThe command value is the executable name that will be invoked by the IDE. This may be a path to a script, relative to the extension root (e.g. \"Scripts/run.sh\"), or a command available on the user’s \"PATH\" when the \"shell\" property is set to \"true\".",
                    "type": "string"
                },
                "shell": {
                    "description": "If \"true\", the command will be executed within a shell.",
                    "type": "boolean"
                },
                "args": {
                    "description": "An array of interpolated strings passed to the command",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "env": {
                    "description": "Interpolated environment variables set for the command",
                    "type": "object",
                    "patternProperties": {
                        "[a-zA-Z_]+[ a-zA-Z0-9_ ]*": {
                            "type": "string"
                        }
                    }
                },
                "matchers": {
                    "description": "An array of Issue Matcher identifiers used to automatically parse task output",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "resolve": {
                    "description": "A string representing a task assistant identifier used to resolve the action.\nIf the action to be invoked is not known when the task template is defined, a template may use the resolve value to specify a Task Assistant identifier that can resolve the task. When the action is invoked, the assistant’s \"resolveTaskAction()\" method will be invoked to request an action instance, such as \"TaskProcessAction\". If the data property is provided, the JSON object it specifies will be set for the context parameter’s data property during resolution.",
                    "type": "string"
                },
                "data": {
                    "description": "Arbitrary data that may be provided when resolving the action"
                },
                "buildBeforeRunning": {
                    "description": "If set to \"true\", then the \"Run\" action will automatically invoke \"Build\" before it.",
                    "type": "boolean"
                },
                "persistent": {
                    "description": "If set to \"true\", then the action will use UI elements that denote it is persistent (an action that will run for a protracted length of time, such as a preview server).",
                    "type": "boolean"
                }
            }
        },
        "separator": {
            "description": "Single-property object used to delimit groups of menu items",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "separator": {
                    "description": "For both the Extensions and Editor menu contexts (commands placed within the \"extensions\" and \"editor\" groups of the \"commands\" manifest key), you can optionally include separator items to better group your commands.\nThese can be placed anywhere in your commands array, provided that two separators are not adjacent to each other and they do not appear at the head and tail of the menu.",
                    "type": "boolean"
                }
            }
        },
        "url": {
            "type": [ "string", "object" ],
            "format": "uri",
            "properties": {
                "url": {
                    "description": "A string representing the URL",
                    "type": "string",
                    "format": "uri"
                },
                "email": {
                    "description": "An email address that will be the target of a \"mailto:\" link. It is generally preferred to use a URL value of some type over an email address / \"mailto:\" link",
                    "type": "string",
                    "format": "email"
                }
            }
        }
    }
}
